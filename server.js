/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/

var express = require("express");
var app = express();
app.disable("x-powered-by");
var fs = require("fs");
var path = require("path");
var bcrypt = require('bcrypt');


const plaintextPassword = 'passw0rd!';
const hashedPassword = '$2a$12$Y.PHPE15wR25qrrtgGkiYe2sXo98cjuMCG1YwSI5rJW1DSJp0gEYS';
const saltRounds = 13;


// async function hashPassword(password) {
//   try {
//       const hash = await bcrypt.hash(password, saltRounds);
//       console.log(hash);
//       return hash;
//   } catch (error) {
//       throw error;
//   }
// }


// async function comparePasswords(plaintext, hash) {
//   try {
//       const match = await bcrypt.compare(plaintext, hash);
//       return match;
//   } catch (error) {
//       throw error;
//   }
// }


// // Example usage
// (async () => {
//   try {
//       // Hashing a password
//       const hashedPassword = await hashPassword(plaintextPassword);
//       console.log('Hashed password:', hashedPassword);

//       // Comparing a password with its hash
//       const match = await comparePasswords(plaintextPassword, hashedPassword);
//       if (match) {
//           console.log('Passwords match!');
//       } else {
//           console.log('Passwords do not match!');
//       }
//   } catch (error) {
//       console.error('Error:', error);
//   }
// })();


// ================================================================


// function hashPasswordSync(password) {
//   try {
//       var hash = bcrypt.hashSync(password, saltRounds);
//       console.log(hash);
//       return hash;
//   } catch (error) {
//       throw error;
//   }
// }

// function comparePasswordsSync(plaintext, hash) {
//   try {
//     var result = bcrypt.compareSync(plaintext, hash);
//     return result;
//   } catch (error) {
//       throw error;
//   }
// }

// Example usage
// try {
  // Hashing a password
  // const hashedPassword = hashPasswordSync(plaintextPassword);
  // console.log('Hashed password:', hashedPassword);

  // Comparing a password with its hash
//   const match = comparePasswordsSync(plaintextPassword, hashedPassword);
//   if (match) {
//       console.log('Passwords match!');
//   } else {
//       console.log('Passwords do not match!');
//   }
// } catch (error) {
//   console.error('Error:', error);
// }


// ================================================================


// bcrypt.hash('passw0rd!', 13, async (err, hash) => {
//   try {
//     console.log(hash);
//   //$2a$12$Y.PHPE15wR25qrrtgGkiYe2sXo98cjuMCG1YwSI5rJW1DSJp0gEYS
//     bcrypt.compare('myPlaintextPassword', hash, (err, res) => {
//       console.log(res); //true
//     });
//   } catch(error) {
//     console.log('Error: ', error);
//   }

// });


const myPlaintextPassword = 'passw0rd!';

// Hash the plaintext password asynchronously
bcrypt.hash(myPlaintextPassword, saltRounds, async (err, hash) => {
  try {
    // Log the completed hash to the console
    console.log('Hash:', hash);

    // Simulate storing the hash in your database
    // (In a real server, you would save the hash in your database)

    // Compare the plaintext password with the generated hash
    bcrypt.compare(myPlaintextPassword, hash, (err, res) => {
      // Log the result of the comparison to the console
      console.log('Comparison Result:', res); // Should be true
    });

    // Testing with a different plaintext password
    const someOtherPlaintextPassword = 'someOtherPlaintextPassword';
    bcrypt.compare(someOtherPlaintextPassword, hash, (err, res) => {
      // Log the result of the comparison to the console
      console.log('Comparison Result with Different Password:', res); // Should be false
    });
  } catch(error) {
    console.log('Error: ', error);
  }
});


app.use(function (req, res, next) {
  res.set({
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers":
      "Origin, X-Requested-With, content-type, Accept",
  });
  app.disable("x-powered-by");
  next();
});

app.get("/file/*?", function (req, res, next) {
  if (req.params[0] === ".env") {
    return next({ status: 401, message: "ACCESS DENIED" });
  }
  fs.readFile(path.join(__dirname, req.params[0]), function (err, data) {
    if (err) {
      return next(err);
    }
    res.type("txt").send(data.toString());
  });
});

var main = require("./myApp.js");
app.get("/app-info", function (req, res) {
  // list middlewares mounted on the '/' camper's app
  var appMainRouteStack = main._router.stack
    .filter((s) => s.path === "")
    .map((l) => l.name)
    // filter out express default middlewares
    .filter(
      (n) => !(n === "query" || n === "expressInit" || n === "serveStatic")
    );

  // filter out CORS Headers
  var hs = Object.keys(res.getHeaders()).filter(
    (h) => !h.match(/^access-control-\w+/)
  );
  var hObj = {};
  hs.forEach((h) => {
    hObj[h] = res.getHeaders()[h];
  });
  delete res.get("strict-transport-security");
  res.json({ headers: hObj, appStack: appMainRouteStack });
});

app.get("/package.json", function (req, res, next) {
  fs.readFile(__dirname + "/package.json", function (err, data) {
    if (err) return next(err);
    res.type("txt").send(data.toString());
  });
});

app.use(function (req, res, next) {
  res.status(404).type("txt").send("Not Found");
});

module.exports = app;

/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/
